# Copyright 2014 Nikolai Suslov, Krestianstvo.org project
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#
# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
---

extends: prim2.vwf
properties:
  radius: 1
  rsegs: 10
  ssegs: 10
  iteration: 3
  angle: 60
  stepLength: 1
  lsys: '2;F=F-F++F-F;G=;F++F++F'
  rule: 'F++F++F'
  axiomF: 'F=F-F++F-F'
  axiomG: 'G='
ometaGrammarM:
ometaGrammarB:
ometaGrammarD:
methods:
  generateFrom:
  testLSys:
  resetLS:
  makeLSys:
  generateLSys:
  goForward:
  turn:
  flatCollection:
  selectRule:
scripts:
- |
    this.testLSys = function(){
    	var tree = this.ometaLngM().matchAll("2;F=F--F--F--G;G=GG;F--F--F", "expr");
    	console.log(tree);
    	var lsys = this.ometaLngB().matchAll(tree, "gen");
    	console.log(lsys);
    }
    this.resetLS = function(){
    	this.children_by_name.pen.points = [];
    }
    this.makeLSys = function(){
    	this.resetLS();
    	var oldPos = this.transformAPI.getWorldPosition();
    	this.transformAPI.setPosition(0, 0, 0);
    	var lsys = this.generateFrom("3; F=F-F++F-F; G=; F++F++F");
    	this.ometaLngD().matchAll(lsys, "start", [60, 1]);
    	this.transformAPI.setPosition(oldPos);
    }
    this.generateLSys = function(){
    	this.resetLS();
    	var oldPos = this.transformAPI.getWorldPosition();
      var oldRot = this.transformAPI.getRotation();
      this.transformAPI.setPosition(0, 0, 0);
      this.transformAPI.setRotation(0, 0, 0);
      //this.lsys = this.iteration.toString() + ";F=" + this.axiomF + ";G=" + this.axiomG + ";" + this.rule;
      var gen = this.generateFrom(this.lsys);
      this.ometaLngD().matchAll(gen, "start", [this.angle, this.stepLength]);
      this.transformAPI.setPosition(oldPos);
      this.transformAPI.setRotation(oldRot);
    }
    this.generateFrom = function(str){
    	var tree = this.ometaLngM().matchAll(str, "expr");
        var lsys = this.ometaLngB().matchAll(tree, "gen");
        return lsys;
    }
    this.goForward = function(step){
    	this.transformAPI.move(step, 0, 0, "local");
     	var pos = this.transformAPI.getPosition();
     	pos = new THREE.Vector3(pos[0], pos[1], pos[2]);
     	this.children_by_name.pen.points.push([pos.x, pos.y, pos.z]);
    }
    this.turn = function(angle) {
    	this.transformAPI.rotateZ(angle, "local");
    }
    this.selectRule = function(g, k){
    	var col = g.filter(function(x){
        return x[0] == k;
      });
      if (col.length > 0)
        {
          return col[0][1]
        }
      return k;
    }
    this.flatCollection = function(arr){
    	var out = [];
      	for (var i = 0; i < arr.length; i++)
      	{ out.push.apply(out, Array.isArray(arr[i]) ? this.flatCollection(arr[i]) : [arr[i]])}
      	return out;
    }